type BridgedAsset = struct {
  name: str,
  symbol: str,
  decimals: u8,
};

type FactoryError = enum {
  Unauthorized,
  UnexpectedFTEvent,
  MessageSendError,
  NotFound,
  PairExist,
  PairCreationFailed,
  PairNotExist,
  VFTError,
  BridgedAssetExist,
};

constructor {
  New : (code_id_pair: code_id, fee_to: actor_id, fee_to_setter: actor_id, admin: actor_id);
};

service FactoryService {
  AddBridgedAsset : (token_address: actor_id, name: str, symbol: str, decimals: u8) -> result (BridgedAsset, FactoryError);
  AddPair : (token_a: actor_id, token_b: actor_id, pair_address: actor_id) -> result (actor_id, FactoryError);
  CreatePair : (token_a: actor_id, token_b: actor_id) -> result (actor_id, FactoryError);
  RemoveBridgedAsset : (token_address: actor_id) -> result (null, FactoryError);
  RemovePair : (token_a: actor_id, token_b: actor_id) -> result (null, FactoryError);
  SetAdmin : (new_admin: actor_id) -> result (null, FactoryError);
  SetFeeTo : (new_fee_to: actor_id) -> result (null, FactoryError);
  SetFeeToSetter : (new_fee_setter: actor_id) -> result (null, FactoryError);
  SetRouter : (router: actor_id) -> result (null, FactoryError);
  UpdateCodeIdPair : (new_code_id_pair: code_id) -> result (null, FactoryError);
  query GetAdmin : () -> actor_id;
  query GetAllPairs : () -> vec struct { actor_id, actor_id };
  query GetAllPairsAddress : () -> vec actor_id;
  query GetCodeIdPair : () -> code_id;
  query GetFeeTo : () -> actor_id;
  query GetFeeToSetter : () -> actor_id;
  query GetPair : (token_a: actor_id, token_b: actor_id) -> actor_id;
  query GetPairLength : () -> u64;
  query GetRouter : () -> actor_id;

  events {
    /// Should be returned from [`Action::CreatePair`].
    PairCreated: struct {
      /// A pair of SFT [`ActorId`]s.
      token_pair: struct { actor_id, actor_id },
      /// [`ActorId`] of a created Pair contract.
      pair_address: actor_id,
      /// A number of Pair contracts (including a created one) inside the
      /// Factory contract.
      pair_number: u64,
    };
    /// Should be returned from [`Action::FeeToSetter`].
    FeeToSetterSet: actor_id;
    /// Should be returned from [`Action::FeeTo`].
    FeeToSet: actor_id;
    Pair: actor_id;
    RouterSet: actor_id;
    AdminSet: actor_id;
    CodeIdPairUpdated: code_id;
    PairRemoved: struct {
      token_pair: struct { actor_id, actor_id }
    };
    BridgedAssetAdded: struct {
      token_address: actor_id,
      name: str,
      symbol: str,
      decimals: u8,
    };
    BridgedAssetRemoved: struct {
      token_address: actor_id
    };
  }
};

